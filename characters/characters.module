<?php 
// $Id$

/**
 * @file characters.module
 * 
 * This file contains all code necessary for managing and displaying characters from the WoW Armory.
 * Some functions used here are located in armory.module, for sharing with other "Armory-modules".
 * 
 * @see armory.module
 */

/**
 * Implementation of hook_menu()
 */
function characters_menu() {
  $items = array();

  $items['characters/js/%'] = array(
    'page callback'    => 'characters_js',
    'page arguments'   => array(2),
    'access arguments' => array('access content'),
    'type '            => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_access() 
 */
function characters_access($op, $node, $account = NULL) {
  global $user;
  if (empty($account)) {
    $account = $user;
  }

  if ($op != 'create') {
    $node = (object)$node;
  }

  if ($op == 'create') {
    if (user_access('administer armory') || user_access('create armory profile')) {
      return TRUE;
    }
  }
  elseif ($op == 'update' || $op == 'delete') {
    if (user_access('administer armory') || user_access('manage armory profiles')) {
      return TRUE;
    }
    elseif (user_access('create armory profile') && $account->uid == $node->uid) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_insert()
 */
function characters_insert($node) { 
  foreach ($node->characters as $character) {
    _characters_insert_operation($character, $node);
  }
}

/**
 * Implementation of hook_update()
 */
function characters_update($node) {
  if ($node->revision) {
    characters_insert($node);
  }
  else {
    // If the character has been removed from the node, we have to remove it.
    // First, we set up two arrays to help us.
    $chars_in_db = array();
    $chars_submitted = array(); // This is build in the foreach loop further down.
    $result = db_query("SELECT nid, vid, cid, charname, servername, region FROM {characters} WHERE nid = %d AND vid = %d", $node->nid, $node->vid);
    while ($row = db_fetch_array($result)) {
      $chars_in_db[] = implode('-', $row);
    }

    foreach ($node->characters as $character) {
      $server_region = explode(', ', $character['server_region']);
      $character['servername'] = $server_region[0];
      $character['region'] = drupal_strtolower($server_region[1]);
      // Is this a new character, or do we already have it?
      $item = db_fetch_object(db_query("SELECT * FROM {characters} WHERE charname = '%s' AND servername = '%s' AND region = '%s' 
	                                                                     AND nid = %d AND vid = %d",
                          $character['charname'], 
                          $character['servername'], 
                          $character['region'],
                          $node->nid, 
                          $node->vid
                        ));
      // If the character exists in the database, update it:
      if ($item == TRUE) {
        // We need to load the XML-file in order to get additional information to add to the database.
        // Besides inserts and updates, this is done at cron.
        $char_info = _characters_character_sheet($character);
        if (!empty($char_info->character['guildname']) && module_exists('guilds')) {
          $result = db_query("SELECT * FROM {guilds} WHERE guildname = '%s' AND servername = '%s' AND region = '%s'", 
                              $char_info->character['guildname'], 
                              $char_info->character['realm'], 
                              $character['region']);
          if (db_affected_rows() > 0) {
            $guild = db_fetch_object($result);
            $item->new_gid = $guild->gid;
          } 
          else {
            $item->new_gid = 0;
          }
        }
        $item->level = $char_info->character['level'];

        // Set up professions.
        $item->profession0 = $char_info->characterTab->professions->skill[0]['name'];
        $item->profession0 .= (!empty($item->profession0)) ? ';'. $char_info->characterTab->professions->skill[0]['value'] : '';
        $item->profession1 = $char_info->characterTab->professions->skill[1]['name'];
        $item->profession1 .= (!empty($item->profession1)) ? ';'. $char_info->characterTab->professions->skill[1]['value'] : '';
        $item->faction = $char_info->character['faction'];
        // We only update professions, level and gid, because all other parameters should be the 
        // same, unless the character has been moved, or deleted and recreated with the same name. 
        db_query("UPDATE {characters} SET level = %d, gid = %d, profession0 = '%s', profession1 = '%s', faction = '%s' WHERE cid = %d AND nid = %d AND vid = %d", 
                  $item->level,
                  $item->new_gid,
                  $item->profession0,
                  $item->profession1,
                  $item->faction,
                  $item->cid, 
                  $node->nid, 
                  $node->vid
                );
        // And we update the {guilds_members} table, in case the character switched guilds (oh, teh drama!).
        db_query("UPDATE {guilds_members} SET gid = %d WHERE cid = %d AND gid = %d", 
                  $item->new_gid,
                  $item->cid, 
                  $item->gid);
        // Add info to the helper-array for removing characters.
        $char_comp = array('nid' => $node->nid, 'vid' => $node->vid, 'cid' => $item->cid, 'charname' => $character['charname'], 
                           'servername' => $character['servername'], 'region' => $character['region']);
        $chars_submitted[] = implode('-', $char_comp);
      }

      // If the character is new, insert it:
      elseif ($item == FALSE) {
        _characters_insert_operation($character, $node);
      }
    }
    // Figure out which characters are to be removed.
    $chars_removed = array_diff($chars_in_db, $chars_submitted);
    // And remove them.
    foreach ($chars_removed as $item) {
      $character = explode('-', $item);
      db_query("DELETE FROM {characters} WHERE cid = %d AND nid = %d AND vid = %d", $character[2], $character[0], $character[1]);
      db_query("UPDATE {guilds_members} SET cid = 0 WHERE cid = %d", $character[2]);
    }
  }
}

/**
 * Implementation of hook_delete()
 */
function characters_delete(&$node) {
  $result = db_query("SELECT charname, gid FROM {characters} WHERE nid = %d", $node->nid);
  while ($row = db_fetch_object($result)) {
    db_query("UPDATE {guilds_members} SET cid = 0 WHERE charname = '%s' AND gid = %d", $row->charname, $row->gid);
  }
  db_query("DELETE FROM {characters} WHERE nid = %d", $node->nid);
}

/**
 * Implementation of hook_load()
 */
function characters_load($node) {
  $result = db_query("SELECT * FROM {characters} WHERE nid = %d AND vid = %d ORDER BY main_alt ASC, level DESC", $node->nid, $node->vid);
  $node->characters = array();
  while ($row = db_fetch_array($result)) {
    $row['server_region'] = $row['servername'] .', '. drupal_strtoupper($row['region']);
    $node->characters[] = $row;
  }
  return $node;
}

/**
 * Implementation of hook_nodeapi()
 */
function characters_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) { 
    case 'delete revision':
      db_query("DELETE FROM {characters} WHERE nid = %d AND vid = %d", $node->nid, $node->vid);
      foreach ($node->characters as $key => $value) {
        db_query("UPDATE {guilds_members} SET cid = 0 WHERE charname = '%s' AND gid = %d", 
                  $node->characters[$key]['charname'], $node->characters[$key]['gid']);
      }
      break;
  }
}

/**
 * Implementation of hook_view()
 */
function characters_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);

  $node->content['characters'] = array(
    '#value' =>  theme('characters_characters', $node->characters), 
    '#weight' => 3,
  );
  $node->content['body']['#weight'] = 4;

  return $node;
}

/**
 * Implementation of hook_node_info()
 */
function characters_node_info() {
  return array(
    'characters_profile' => array(
      'name' => t('Character profile'),
      'module' => 'characters',
      'description' => t('Add your World of Warcraft characters to be displayed on your profile here, with links to the Armory.'),
      'body_label' => t('Character information'),
    ),
  );
}

/**
 * Implementation of hook_theme().
 */
function characters_theme() {
  return array(
    'characters_characters_table' => array(
      'arguments' => array('form'),
    ),
    'characters_characters' => array(
      'arguments' => array('characters' => NULL),
    ),
    'characters_character_sheet' => array(
      'arguments' => array('char_id' => NULL,
                           'chartitle' => NULL,
                           'guild' => NULL,
                           'infostring' => NULL,
                           'prof0' => NULL,
                           'prof1' => NULL,
                           'class_class' => NULL,
                           'faction_class' => NULL,
                           'race_class' => NULL,
                           'prof0_style' => NULL,
                           'prof1_style' => NULL,
      ),
      'template' => 'character-sheet',
    ),
  );
}

/**
 * Function for theming a character sheet with one or multiple characters.
 * 
 * @param $characters
 * An array with all the node's characters, each as an array with at least charname, servername and region.
 * 
 * @return
 * Returns complete HTML output. 
 */
function theme_characters_characters($characters) {
  $armorypath = drupal_get_path('module', 'armory');
  $modpath = drupal_get_path('module', 'characters');
  $style = variable_get('armory_style', 'armory-plain-bright');
  drupal_add_css($armorypath .'/armory.css');
  drupal_add_css($armorypath .'/'. $style .'.css');
  // jquery_ui.module is not required, but highly recommended.
  if (module_exists('jquery_ui')) {
    jquery_ui_add('ui.tabs');
    drupal_add_js($modpath .'/characters.js');
  }

  // Prepare to create output.
  $tabs = array();
  $output_chars = '';
  $i = 1;
  foreach ($characters as $character) {
    $char_info = _characters_character_sheet($character);
    if ($char_info == FALSE) continue;
    // armory_id_safe() will reduce strings to alphanumerics, dashes and underscores, and as such, it is safe.
    $id_string = 'char-'. armory_id_safe($char_info->character['name']) .'-'. armory_id_safe($char_info->character['realm']) .'-'. armory_id_safe($character['region']);
    $curi = 'http://'. $character['region'] .'.wowarmory.com/character-sheet.xml?'. $char_info->character['charUrl'];
    $guri = 'http://'. $character['region'] .'.wowarmory.com/guild-info.xml?'. $char_info->character['guildUrl'];
    $chartitle = $char_info->character['prefix'] .' '. $char_info->character['name'] . $char_info->character['suffix'];
    $infostring = t('Level @level @class of @realm, @region', array('@level' => $char_info->character['level'], 
                                                                    '@class' => $char_info->character['class'], 
                                                                    '@realm' => $char_info->character['realm'], 
                                                                    '@region' => drupal_strtoupper($character['region']), 
                                                                   ));
    // If the character belongs to a guild, see if we have that guild here, and then link to it.
    if (!empty($char_info->character['guildname'])) {
      $result = db_query("SELECT nid, ranks FROM {guilds} WHERE guildname = '%s' AND servername = '%s' AND region = '%s'", 
                          $char_info->character['guildname'], 
                          $char_info->character['realm'], 
                          $character['region']);
      if (db_affected_rows() > 0) {
        $item = db_fetch_object($result);
        // TODO Add rankname?
        $guild = l('<'. $char_info->character['guildname'] .'>', 'node/'. $item->nid) .' ';
      }
      else {
        $guild = '&lt;'. $char_info->character['guildname'] .'&gt; ';
      }
      $guild .= l(_armory_external_icon(), $guri, array('html' => TRUE));
    }

    // Set up and create styles for professions.
    $professions = array();
    $professions[0] = _characters_load_professions($char_info->characterTab->professions->skill[0]);
    $professions[1] = _characters_load_professions($char_info->characterTab->professions->skill[1]);

    $output_chars .= theme('characters_character_sheet', $id_string,
                                                         l($chartitle, $curi), 
                                                         $guild, 
                                                         $infostring,
                                                         $professions[0]['output'],
                                                         $professions[1]['output'],
                                                         armory_id_safe($char_info->character['class']),
                                                         armory_id_safe($char_info->character['faction']),
                                                         armory_id_safe($char_info->character['race']), 
                                                         $professions[0]['style'], 
                                                         $professions[1]['style']);
    $tabs[] = l($char_info->character['name'], 
                $_REQUEST['q'], 
                array('fragment' => $id_string,
                      'attributes' => array('class' => armory_id_safe($char_info->character['class']) .' char-tab')));
    $i++;
  }

  $tablinks = theme('item_list', $tabs, NULL, 'ul', array('class' => 'characters-character-tab-links'));
  $tabs_markup = ((count($tabs) > 1) && (module_exists('jquery_ui'))) ? $tablinks : '';
  $output = '<div class="characters-character-tabs">'. $tabs_markup . $output_chars .'</div>';

  return $output;
}

/**
 * Function for theming the table listing characters on node edit.
 * 
 * @param $form
 * The node form.
 * 
 * @return
 * Returns a themed table which lists character names, servernames and regions.
 */
function theme_characters_characters_table($form) {
  $rows = array();
  $headers = array(
    t('Character'),
    t('Server'),
    '',  // Blank header title for the remove link.
  );

  foreach (element_children($form) as $key) {
    // No need to print the field title every time.
    unset(
      $form[$key]['charname_text']['#title'],
      $form[$key]['server_region_text']['#title'],
      $form[$key]['main_alt_text']['#title'],
      $form[$key]['remove_character']['#title']
    );

    // Build the table row.
    $row = array(
      'data' => array(
        array('data' => drupal_render($form[$key]['charname']) . drupal_render($form[$key]['charname_text']), 'class' => 'characters-charname'),
        array('data' => drupal_render($form[$key]['server_region']) . drupal_render($form[$key]['server_region_text']), 'class' => 'characters-server_region'),
        array('data' => drupal_render($form[$key]['main_alt_text']), 'class' => 'characters-main_alt'),
        array('data' => drupal_render($form[$key]['remove_character']), 'class' => 'remove-characters-character'),
      ),
    );

    // Add additional attributes to the row, such as a class for this row.
    if (isset($form[$key]['#attributes'])) {
      $row = array_merge($row, $form[$key]['#attributes']);
    }
    $rows[] = $row;
  }

  $output = theme('table', $headers, $rows);
  $output .= drupal_render($form);
  return $output;
}

/**
 * Implementation of hook_form()
 */
function characters_form(&$node, $form_state) {
  $type = node_get_types('type', $node);

  $form['xml_info'] = array(
    '#type' => 'item',
    '#value' => t('Note that when you save the node, the XML file(s) will be loaded from wowarmory.com. Depending on server load, this may take a while. Please be patient.'),
    '#prefix' => '<div class="messages status"><p>',
    '#suffix' => '</p></div>',
    '#weight' => -10,
  );

  // Title.
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#default_value' => $node->title,
    '#required' => TRUE,
    '#weight' => -5,
  );

  // Body.
  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => check_plain($type->body_label),
    '#default_value' => $node->body,
    '#weight' => -2,
  );

  // Characters.
  $form['char_wrapper'] = array(
    '#tree' => FALSE,
    '#weight' => -3,
    '#prefix' => '<div class="clear-block" id="profile-character-wrapper">',
    '#suffix' => '</div>',
  );

  // Get number of characters in this profile.
  $char_count = empty($node->characters) ? 0 : count($node->characters);

  // If a new character is added, add it to the list and update the character count.
  if (isset($form_state['new_character'])) {
    if (!isset($node->characters)) {
      $node->characters = array();
    }
    $node->characters = array_merge($node->characters, array($form_state['new_character']));
    $char_count++;
  }

  // If an existing character is removed, remove it from the list and update the character count.
  $remove_delta = -1;
  if (!empty($form_state['remove_delta'])) {
    $remove_delta = $form_state['remove_delta'] - 1;
    unset($node->characters[$remove_delta]);
    // Re-number the values.
    $node->characters = array_values($node->characters);
    $char_count--;
  }

  // Container to display existing characters.
  $form['char_wrapper']['existing_chars'] = array(
    '#type' => 'fieldset',
    '#title' => t('Existing characters'),
    '#collapsible' => TRUE,
  );
  $form['char_wrapper']['existing_chars']['characters'] = array(
    '#prefix' => '<div id="characters-characters">',
    '#suffix' => '</div>',
    '#theme' => 'characters_characters_table',
  );

  // Add the existing characters to the form.
  for ($delta = 0; $delta < $char_count; $delta++) { 
    $charname = isset($node->characters[$delta]['charname']) ? $node->characters[$delta]['charname'] : '';
    $server_region = isset($node->characters[$delta]['server_region']) ? $node->characters[$delta]['server_region'] : '';
    $main_alt = isset($node->characters[$delta]['main_alt']) ? $node->characters[$delta]['main_alt'] : '';
    // Display existing characters using helper function characters_characters_display_form().
    $form['char_wrapper']['existing_chars']['characters'][$delta] = characters_characters_display_form($delta, $charname, $server_region, $main_alt);
  }

  // Add new characters.
  $form['char_wrapper']['add_character'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add characters'),
    '#collapsible' => TRUE,
    '#tree' => FALSE,
    '#weight' => 6,
  );

  // Define the form fields for the new character.
  $form['char_wrapper']['add_character']['new_character'] = array(
    '#tree' => TRUE,
    '#theme' => 'characters_add_character_form',
  );

  $form['char_wrapper']['add_character']['new_character']['charname'] = array(
    '#type' => 'textfield',
    '#title' => t('Character name'),
    '#weight' => 0,
  );

  $form['char_wrapper']['add_character']['new_character']['server_region'] = array(
    '#type' => 'textfield',
    '#title' => t('Server/region'),
    '#description' => t('Type in the first letters of your server, and choose the appropriate one from the list. Should be typed in as "Servername, RG" - make sure a region is specified!'),
    '#autocomplete_path' => 'armory_server',
    '#weight' => 1,
  );

  $form['char_wrapper']['add_character']['new_character']['main_alt'] = array(
    '#type' => 'radios',
    '#title' => t('Alt/main?'),
    '#options' => array(1 => t('Main'), 3 => t('Alt')),
    '#description' => t('Optionally specify if this character is an alt or main.'),
    '#weight' => 2,
  );

  // The "Add more" button
  $form['char_wrapper']['add_character']['characters_character_more'] = array(
    '#type' => 'submit',
    '#value' => t('Add character'),
    '#weight' => 5,
    '#submit' => array('characters_character_add_more_submit'),
    '#ahah' => array(
      'path' => 'characters/js/0',
      'wrapper' => 'characters-characters',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

  return $form;

}

/**
 * Submit handler for "Add more" button on node form.
 */
function characters_character_add_more_submit($form, &$form_state) { 
  $form_state['remove_delta'] = 0;

  if (empty($form_state['values']['new_character']['charname']) || empty($form_state['values']['new_character']['server_region'])) {
    form_set_error('new_character', t('You must supply both a character name and a server with region.'));
    return;
  }

  // To prevent XSS or CSF attempts, we have to check to see if the server/region input is a valid 
  // Warcraft server and region.
  $raw_serverlist = armory_serverlist();
  $serverlist = array();
  foreach ($raw_serverlist['us'] as $key => $value) {
    $serverlist[] = $value .', US';
  }
  foreach ($raw_serverlist['eu'] as $key => $value) {
    $serverlist[] = $value .', EU';
  }
  if (!in_array($form_state['values']['new_character']['server_region'], $serverlist)) {
    form_set_error('new_character', t('An invalid server or region was given. The character @charname was not saved. If the server you supplied is a new one, please try again later, when our serverlists are updated.', array('@charname' => $form_state['values']['new_character']['charname'])));
    return;
  }

  // Set the form to rebuild and run submit handlers.
  node_form_submit_build_node($form, $form_state);

  // Make the changes we want to the form state.
  if ($form_state['values']['characters_character_more']) {
    $new_character = array();
    $new_character['charname'] = $form_state['values']['new_character']['charname'];
    $new_character['server_region'] = $form_state['values']['new_character']['server_region'];
    $new_character['main_alt'] = $form_state['values']['new_character']['main_alt'];
    $new_character['image'] = $form_state['values']['new_character']['image'];

    $form_state['new_character'] = $new_character;
  }
}

/**
 * Submit handler for 'Remove' button on node form.
 */
function characters_remove_row_submit($form, &$form_state) {
  // Set the form to rebuild and run submit handlers.
  node_form_submit_build_node($form, $form_state);
}

function characters_js($delta = 0) {
  $form = characters_ajax_form_handler($delta);

  // Render the new output.
  $character_form = $form['char_wrapper']['characters'];
  // Prevent duplicate wrappers.
  unset($character_form['#prefix'], $character_form['#suffix']);

  $output = theme('status_messages') . drupal_render($character_form);

  // AHAH is not being nice to us and doesn't know about the "Remove" button.
  // This causes it not to attach AHAH behaviours to it after modifying the form.
  // So we need to tell it first.
  $javascript = drupal_add_js(NULL, NULL);
  if (isset($javascript['setting'])) {
    $output .= '<script type="text/javascript">jQuery.extend(Drupal.settings, '. drupal_to_js(call_user_func_array('array_merge_recursive', $javascript['setting'])) .');</script>';
  }

  // Final rendering callback.
  drupal_json(array('status' => TRUE, 'data' => $output));
}

/**
 * AJAX form handler.
 */
function characters_ajax_form_handler($delta = 0) {
  // The form is generated in an include file which we need to include manually.
  include_once 'modules/node/node.pages.inc';
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];

  // Get the form from the cache.
  $form = form_get_cache($form_build_id, $form_state);
  $args = $form['#parameters'];
  $form_id = array_shift($args);

  // We need to process the form, prepare for that by setting a few internals.
  $form_state['post'] = $form['#post'] = $_POST;
  $form['#programmed'] = $form['#redirect'] = FALSE;

  // Set up our form state variable, needed for removing characters.
  $form_state['remove_delta'] = $delta;

  // Build, validate and if possible, submit the form.
  drupal_process_form($form_id, $form, $form_state);
  // If validation fails, force form submission.
  if (form_get_errors()) {
    form_execute_handlers('submit', $form, $form_state);
  }

  // This call recreates the form relying solely on the form_state that the
  // drupal_process_form set up.
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);

  return $form;
}

/**
 * Helper function to define populated form field elements for characters node form.
 */
function characters_characters_display_form($delta, $charname, $server_region, $main_alt) {

  $form = array(
    '#tree' => TRUE,
  );

  // Character name.
  $form['charname'] = array(
    '#type' => 'hidden',
    '#value' => check_plain($charname),
    '#parents' => array('characters', $delta, 'charname'),
  );
  $form['charname_text'] = array(
    '#type' => 'item',
    '#title' => t('Character'),
    '#weight' => 1,
    '#parents' => array('characters', $delta, 'charname'),
    '#value' => check_plain($charname),
  );

  // Server/region.
  $form['server_region'] = array(
    '#type' => 'hidden',
    '#value' => filter_xss($server_region),
    '#parents' => array('characters', $delta, 'server_region'),
  );
  $form['server_region_text'] = array(
    '#type' => 'item',
    '#title' => t('Server'),
    '#weight' => 3,
    '#parents' => array('characters', $delta, 'server_region'),
    '#value' => check_plain($server_region),
  );

  // Alt/main.
  $form['main_alt'] = array(
    '#type' => 'hidden',
    '#value' => $main_alt,
    '#parents' => array('characters', $delta, 'main_alt'),
  );
  $main_alt_map = array(1 => t('Main'), 3 => t('Alt'));
  $form['main_alt_text'] = array(
    '#type' => 'item',
    '#title' => t('Alt/main?'),
    '#weight' => 4,
    '#parents' => array('characters', $delta, 'main_alt'),
    '#value' => $main_alt_map[$main_alt],
  );

  // Remove button.
  $form['remove_character'] = array(
    '#type' => 'submit',
    '#name' => 'remove_character_'. $delta,
    '#value' => t('Remove'),
    '#weight' => 1,
    '#submit' => array('characters_remove_row_submit'),
    '#parents' => array('characters', $delta, 'remove_character'),
    '#ahah' => array(
      'path' => 'characters/js/'. ($delta + 1),
      'wrapper' => 'characters-characters',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

  return $form;
}

/**
 * Function to get character information from wowarmory and build a character sheet for display.
 * 
 * @param $character
 * An array with character name, servername and region.
 * 
 * @return
 * Returns a character sheet with info from an xml file fetched from wowarmory.com which is 
 * stored locally.
 */
function _characters_character_sheet($character = array()) {
  if (isset($character['charname']) && isset($character['servername']) && isset($character['region'])) {
    $now = time();
    $maxage = variable_get('armory_characters_maxage', 86400);
    $local_dir = file_directory_path() .'/armory/characters';
    $local_file = $local_dir .'/'. $character['charname'] .'_'. 
                                     str_replace(' ', '_', $character['servername']) .'_'.
                                     $character['region'] .'.xml';
    $curi = 'http://'. $character['region'] .'.wowarmory.com/character-sheet.xml?r='. 
            drupal_urlencode($character['servername']) .'&cn='. 
            drupal_urlencode($character['charname']);
    armory_get_xml($curi, $local_dir, $local_file, 1, $maxage);
    $data = simplexml_load_file($local_file); 
    return $data->characterInfo;
  }
  else {
    drupal_set_message(t('The character information supplied by the characters module was incomplete. Please check that your character profile contains a character name, servername and region.'), 'warning');
    return FALSE;
  }
}

/**
 * Helper function for inserting new characters (to avoid repeating code).
 * 
 * @param $character
 * An array containing charname, servername and region.
 * 
 * @param $node
 * The $node object.
 */
function _characters_insert_operation($character = array(), $node) {
  $server_region = explode(', ', $character['server_region']);
  $character['servername'] = $server_region[0];
  $character['region'] = drupal_strtolower($server_region[1]);
  // To prevent XSS or CSF attempts, we have to check to see if the server/region input is a valid 
  // Warcraft server and region.
  $raw_serverlist = armory_serverlist();
  $serverlist = array();
  foreach ($raw_serverlist['us'] as $key => $value) {
    $serverlist[] = $value .', US';
  }
  foreach ($raw_serverlist['eu'] as $key => $value) {
    $serverlist[] = $value .', EU';
  }
  if (!in_array($character['server_region'], $serverlist)) {
    drupal_set_message(t('An invalid server or region was given. The character @charname was not saved. If the server you supplied is a new one, please try again later, when our serverlists are updated.', array('@charname' => $character['charname'])), 'error');
  }
  elseif (_characters_check_existing_char($character) == TRUE) {
    drupal_set_message(t('The character @charname at @server, @region is already saved in the database.', array('@charname' => $character['charname'], '@server' => $character['servername'], '@region' => drupal_strtoupper($character['region']))), 'error');
    return FALSE;
  }
  else {
    // We need to load the XML-file in order to get addittional information to add to the database.
    // Besides inserts and updates, this is done at cron.
    $char_info = _characters_character_sheet($character);
    if (!empty($char_info->character['guildname']) && module_exists('guilds')) {
      $result = db_query("SELECT * FROM {guilds} WHERE guildname = '%s' AND servername = '%s' AND region = '%s'", 
                          $char_info->character['guildname'], 
                          $char_info->character['realm'], 
                          $character['region']);
      if (db_affected_rows() > 0) {
        $guild = db_fetch_object($result);
        $character['gid'] = $guild->gid;
      } 
      else {
        $character['gid'] = 0;
      }
    }
    $class_map = _class_map();
    // Set up professions.
    $character['profession0'] = $char_info->characterTab->professions->skill[0]['name'];
    $character['profession0'] .= (!empty($char_info->characterTab->professions->skill[0]['name'])) ? ';'. $char_info->characterTab->professions->skill[0]['value'] : '';
    $character['profession1'] = $char_info->characterTab->professions->skill[1]['name'];
    $character['profession1'] .= (!empty($char_info->characterTab->professions->skill[1]['name'])) ? ';'. $char_info->characterTab->professions->skill[1]['value'] : '';
    $character['faction'] = $char_info->character['faction'];
    // Main or alt perhaps?
    $main_alt_map = array(1 => t('Main'), 3 => t('Alt'));
    $main_alt = (empty($character['main_alt'])) ? 2 : $character['main_alt'];
    db_query("INSERT INTO {characters} (nid, vid, charname, class, level, gid, servername, region, profession0, profession1, faction, main_alt) 
              VALUES (%d, %d, '%s', '%s', %d, %d, '%s', '%s', '%s', '%s', '%s', %d)", 
                $node->nid, 
                $node->vid, 
                ucfirst($character['charname']), 
                $class_map[(int) $char_info->character['classId']], 
                $char_info->character['level'], 
                $character['gid'], 
                $character['servername'], 
                $character['region'], 
                $character['profession0'], 
                $character['profession1'], 
                $character['faction'], 
                $main_alt); 
    $cid = db_last_insert_id('{characters}', 'cid');
    if (!empty($char_info->character['guildname']) && module_exists('guilds') && $character['gid'] > 0) {
      $sql = "UPDATE {guilds_members} SET cid = %d WHERE charname = '%s' AND gid = %d";
      db_query($sql, $cid, ucfirst($character['charname']), $character['gid']);
    }
  }
}

/**
 * Helper function for checking against existing characters.
 * 
 * @param $character
 * An array containing charname, servername and region.
 * 
 * @return
 * Returns TRUE if the character already exists, FALSE if not.
 */
function _characters_check_existing_char($character = array()) {
  $result = db_query("SELECT cid FROM {characters} WHERE charname = '%s' AND servername = '%s' AND region = '%s'", 
                      $character['charname'], $character['servername'], $character['region']);
  
  if (db_affected_rows() > 0) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Helper function to set up a profession for output.
 * 
 * @param $professions
 * An object from the xml character sheet with professions.
 * 
 * @return
 * Returns an array with all the information needed to output.
 */
function _characters_load_professions($profession) {
    $percentage = round(($profession['value'] / 450) * 100);
    if ($profession['value'] <= 75) {
      $grade = 'apprentice';
    }
    elseif (($profession['value'] > 75) && ($profession['value'] <= 150)) {
      $grade = 'journeyman';
    }
    elseif (($profession['value'] > 150) && ($profession['value'] <= 225)) {
      $grade = 'expert';
    }
    elseif (($profession['value'] > 225) && ($profession['value'] <= 300)) {
      $grade = 'artisan';
    }
    elseif (($profession['value'] > 300) && ($profession['value'] <= 375)) {
      $grade = 'master';
    }
    elseif (($profession['value'] > 375) && ($profession['value'] <= 450)) {
      $grade = 'grand-master';
    }
    elseif (($profession['value'] > 450) && ($profession['value'] <= 525)) {
      $grade = 'illustrious';
    }
    $class = 'prof-'. armory_id_safe($profession['name']) .' '. $grade;

    $style = array('percentage' => $percentage, 'class' => $class);
    $output = (!empty($profession['name'])) ? $profession['name'] .' - '. $profession['value'] .'/450' : '';

    return array('style' => $style, 'output' => $output);
}














